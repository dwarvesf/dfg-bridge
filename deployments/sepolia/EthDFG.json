{
  "address": "0xF289E3b222dd42B185b7E335fA3C5bd6D132441D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "restrictedSendTime",
          "type": "uint256"
        }
      ],
      "name": "TransferRestrictedStock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newRestrictedSendTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateRestrictedStockSendTime",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "addVerified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "availableBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeVerified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shareholders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "updateVerified",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1658b751030b9614c824b6126e4a4ed5de43c4f7894a62d50f118ba0d614caab",
  "receipt": {
    "to": null,
    "from": "0x2F8E036baE50E25343BF503562C020EF6DAD4dCF",
    "contractAddress": "0xF289E3b222dd42B185b7E335fA3C5bd6D132441D",
    "transactionIndex": 267,
    "gasUsed": "813251",
    "logsBloom": "0x00000000000000000002000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000001000000000000000000000000000000000000024000000000000000000800000000000000000000000000000000400000000000000000001000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd070059fa23cb37039f319452be8724a9770fcd0e1f15ae77ab2e1680180bca6",
    "transactionHash": "0x1658b751030b9614c824b6126e4a4ed5de43c4f7894a62d50f118ba0d614caab",
    "logs": [
      {
        "transactionIndex": 267,
        "blockNumber": 5627632,
        "transactionHash": "0x1658b751030b9614c824b6126e4a4ed5de43c4f7894a62d50f118ba0d614caab",
        "address": "0xF289E3b222dd42B185b7E335fA3C5bd6D132441D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002f8e036bae50e25343bf503562c020ef6dad4dcf"
        ],
        "data": "0x",
        "logIndex": 224,
        "blockHash": "0xd070059fa23cb37039f319452be8724a9770fcd0e1f15ae77ab2e1680180bca6"
      }
    ],
    "blockNumber": 5627632,
    "cumulativeGasUsed": "19382715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Dwarves Foundation GEM",
    "DFG"
  ],
  "numDeployments": 1,
  "solcInputHash": "38e2820d747941dfeed502bd16422289",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"restrictedSendTime\",\"type\":\"uint256\"}],\"name\":\"TransferRestrictedStock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRestrictedSendTime\",\"type\":\"uint256\"}],\"name\":\"UpdateRestrictedStockSendTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"addVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"updateVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ref https://github.com/ethereum/EIPs/blob/master/EIPS/eip-884.md\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"TransferRestrictedStock(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"the amount of transfer.\",\"owner\":\"The address of owner.\",\"receiver\":\"The receiver.\"}},\"UpdateRestrictedStockSendTime(address,uint256)\":{\"params\":{\"addr\":\"The address will be update restrictedStockSendTime.\",\"newRestrictedSendTime\":\"the amount of transfer.\"}}},\"kind\":\"dev\",\"methods\":{\"addVerified(address,bytes32)\":{\"params\":{\"addr\":\"The address of the person represented by the supplied hash.\",\"hash\":\"A cryptographic hash of the address holder's verified information.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"isVerified(address)\":{\"params\":{\"addr\":\"The address to test.\"},\"returns\":{\"_0\":\"true if the address is known to the contract.\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to mint.\",\"_to\":\"The address that will receive the minted tokens.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeVerified(address)\":{\"params\":{\"addr\":\"The verified address to be removed.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateVerified(address,bytes32)\":{\"params\":{\"addr\":\"The verified address of the person represented by the supplied hash.\",\"hash\":\"A new cryptographic hash of the address holder's updated verified information.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TransferRestrictedStock(address,address,uint256,uint256)\":{\"notice\":\"This event is emitted when an transferRestrictedStock   is called by the owner (only owner can run this command)\"},\"UpdateRestrictedStockSendTime(address,uint256)\":{\"notice\":\"This event is emitted when an updateRestrictedStockSendTime   is called by the owner (only owner can run this command)\"}},\"kind\":\"user\",\"methods\":{\"addVerified(address,bytes32)\":{\"notice\":\"Add a verified address, along with an associated verification hash to the contract.  Upon successful addition of a verified address, the contract must emit  `VerifiedAddressAdded(addr, hash, msg.sender)`.  It MUST throw if the supplied address or hash are zero, or if the address has already been supplied.\"},\"availableBalanceOf(address)\":{\"notice\":\"The `availableBalanceOf` function show current available amount to spend of a verified address (to)\"},\"isVerified(address)\":{\"notice\":\"Tests that the supplied address is known to the contract.\"},\"mint(address,uint256)\":{\"notice\":\"As each token is minted it is added to the shareholders array.\"},\"removeVerified(address)\":{\"notice\":\"Remove a verified address, and the associated verification hash. If the address is  unknown to the contract then this does nothing. If the address is successfully removed, this  function must emit `VerifiedAddressRemoved(addr, msg.sender)`.  It MUST throw if an attempt is made to remove a verifiedAddress that owns Tokens.\"},\"transfer(address,uint256)\":{\"notice\":\"The `transfer` function MUST NOT allow transfers to addresses that  have not been verified and added to the contract.  If the `to` address is not currently a shareholder then it MUST become one.  If the transfer will reduce `msg.sender`'s balance to 0 then that address  MUST be removed from the list of shareholders.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The `transferFrom` function MUST NOT allow transfers to addresses that  have not been verified and added to the contract.  If the `to` address is not currently a shareholder then it MUST become one.  If the transfer will reduce `from`'s balance to 0 then that address  MUST be removed from the list of shareholders.\"},\"updateVerified(address,bytes32)\":{\"notice\":\"Update the hash for a verified address known to the contract.  Upon successful update of a verified address the contract must emit  `VerifiedAddressUpdated(addr, oldHash, hash, msg.sender)`.  If the hash is the same as the value already stored then  no `VerifiedAddressUpdated` event is to be emitted.  It MUST throw if the hash is zero, or if the address is unverified.\"}},\"notice\":\"An `ERC20` compatible token that conforms to Delaware State Senate,  149th General Assembly, Senate Bill No. 69: An act to Amend Title 8  of the Delaware Code Relating to the General Corporation Law.  Implementation Details.  An implementation of this token standard SHOULD provide the following:  `name` - for use by wallets and exchanges.  `symbol` - for use by wallets and exchanges.  In addition to the above the following optional `ERC20` function MUST be defined.  `decimals` \\u2014 MUST return `0` as each token represents a single Share and Shares are non-divisible.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/EthDFG.sol\":\"EthDFG\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/EthDFG.sol\":{\"content\":\"// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens. */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\n\\n/**\\n *  An `ERC20` compatible token that conforms to Delaware State Senate,\\n *  149th General Assembly, Senate Bill No. 69: An act to Amend Title 8\\n *  of the Delaware Code Relating to the General Corporation Law.\\n *\\n *  Implementation Details.\\n *\\n *  An implementation of this token standard SHOULD provide the following:\\n *\\n *  `name` - for use by wallets and exchanges.\\n *  `symbol` - for use by wallets and exchanges.\\n *\\n *  In addition to the above the following optional `ERC20` function MUST be defined.\\n *\\n *  `decimals` \\u2014 MUST return `0` as each token represents a single Share and Shares are non-divisible.\\n *\\n *  @dev Ref https://github.com/ethereum/EIPs/blob/master/EIPS/eip-884.md\\n */\\ncontract EthDFG is ERC20, Ownable(msg.sender) {\\n    bytes32 constant private ZERO_BYTES = bytes32(0);\\n    address constant private ZERO_ADDRESS = address(0);\\n\\n    mapping(address => bytes32) private verified;\\n    mapping(address => address) private cancellations;\\n    mapping(address => uint256) private holderIndices;\\n    mapping(address => uint256) private restrictedStock;\\n    mapping(address => uint256) private restrictedStockSendTime;\\n\\n    address[] public shareholders;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\\n\\n    /**\\n     *  This event is emitted when an transferRestrictedStock \\n     *  is called by the owner (only owner can run this command)\\n     *  @param owner The address of owner.\\n     *  @param receiver The receiver.\\n     *  @param amount the amount of transfer.\\n     */\\n    event TransferRestrictedStock(\\n        address  owner,\\n        address indexed receiver,\\n        uint256 indexed amount,\\n        uint256 indexed restrictedSendTime\\n    );\\n\\n    /**\\n     *  This event is emitted when an updateRestrictedStockSendTime \\n     *  is called by the owner (only owner can run this command)\\n     *  @param addr The address will be update restrictedStockSendTime.\\n     *  @param newRestrictedSendTime the amount of transfer.\\n     */\\n    event UpdateRestrictedStockSendTime(\\n        address indexed addr,\\n        uint256 indexed newRestrictedSendTime\\n    );\\n\\n    modifier isVerifiedAddress(address addr) {\\n        require(verified[addr] != ZERO_BYTES);\\n        _;\\n    }\\n\\n    modifier isShareholder(address addr) {\\n        require(holderIndices[addr] != 0);\\n        _;\\n    }\\n\\n    modifier isNotShareholder(address addr) {\\n        require(holderIndices[addr] == 0);\\n        _;\\n    }\\n\\n    modifier isNotCancelled(address addr) {\\n        require(cancellations[addr] == ZERO_ADDRESS);\\n        _;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 0;\\n    }\\n\\n    /**\\n     * As each token is minted it is added to the shareholders array.\\n     * @param _to The address that will receive the minted tokens.\\n     * @param _amount The amount of tokens to mint.\\n     */\\n    function mint(address _to, uint256 _amount)\\n        public\\n        onlyOwner\\n    {\\n        require(verified[_to] != ZERO_BYTES);\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     *  Add a verified address, along with an associated verification hash to the contract.\\n     *  Upon successful addition of a verified address, the contract must emit\\n     *  `VerifiedAddressAdded(addr, hash, msg.sender)`.\\n     *  It MUST throw if the supplied address or hash are zero, or if the address has already been supplied.\\n     *  @param addr The address of the person represented by the supplied hash.\\n     *  @param hash A cryptographic hash of the address holder's verified information.\\n     */\\n    function addVerified(address addr, bytes32 hash)\\n        public\\n        onlyOwner\\n        isNotCancelled(addr)\\n    {\\n        require(addr != ZERO_ADDRESS);\\n        require(hash != ZERO_BYTES);\\n        require(verified[addr] == ZERO_BYTES);\\n        verified[addr] = hash;\\n    }\\n\\n    /**\\n     *  Remove a verified address, and the associated verification hash. If the address is\\n     *  unknown to the contract then this does nothing. If the address is successfully removed, this\\n     *  function must emit `VerifiedAddressRemoved(addr, msg.sender)`.\\n     *  It MUST throw if an attempt is made to remove a verifiedAddress that owns Tokens.\\n     *  @param addr The verified address to be removed.\\n     */\\n    function removeVerified(address addr)\\n        public\\n        onlyOwner\\n    {\\n        require(verified[addr] != ZERO_BYTES);\\n        require(availableBalanceOf(addr) == 0);\\n        verified[addr] = ZERO_BYTES;\\n    }\\n\\n    /**\\n     *  Update the hash for a verified address known to the contract.\\n     *  Upon successful update of a verified address the contract must emit\\n     *  `VerifiedAddressUpdated(addr, oldHash, hash, msg.sender)`.\\n     *  If the hash is the same as the value already stored then\\n     *  no `VerifiedAddressUpdated` event is to be emitted.\\n     *  It MUST throw if the hash is zero, or if the address is unverified.\\n     *  @param addr The verified address of the person represented by the supplied hash.\\n     *  @param hash A new cryptographic hash of the address holder's updated verified information.\\n     */\\n    function updateVerified(address addr, bytes32 hash)\\n        public\\n        onlyOwner\\n        isVerifiedAddress(addr)\\n    {\\n        require(hash != ZERO_BYTES);\\n        bytes32 oldHash = verified[addr];\\n        if (oldHash != hash) {\\n            verified[addr] = hash;\\n        }\\n    }\\n\\n    /**\\n     *  The `transfer` function MUST NOT allow transfers to addresses that\\n     *  have not been verified and added to the contract.\\n     *  If the `to` address is not currently a shareholder then it MUST become one.\\n     *  If the transfer will reduce `msg.sender`'s balance to 0 then that address\\n     *  MUST be removed from the list of shareholders.\\n     */\\n    function transfer(address to, uint256 value)\\n        public\\n        isVerifiedAddress(to)\\n        override\\n        returns (bool)\\n    {\\n        require(availableBalanceOf(msg.sender) >= value);\\n        return super.transfer(to, value);\\n    }\\n\\n    /**\\n     * The `availableBalanceOf` function show current available amount to spend\\n     * of a verified address (to)\\n     */\\n     function availableBalanceOf(address to) \\n        public\\n        view\\n        isVerifiedAddress(to)\\n        returns (uint256)\\n     {\\n         uint256 all = balanceOf(to);\\n         return all;\\n     }\\n\\n    /**\\n     *  The `transferFrom` function MUST NOT allow transfers to addresses that\\n     *  have not been verified and added to the contract.\\n     *  If the `to` address is not currently a shareholder then it MUST become one.\\n     *  If the transfer will reduce `from`'s balance to 0 then that address\\n     *  MUST be removed from the list of shareholders.\\n     */\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        isVerifiedAddress(to)\\n        override\\n        returns (bool)\\n    {\\n        require(availableBalanceOf(from) >= value);\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    /**\\n     *  Tests that the supplied address is known to the contract.\\n     *  @param addr The address to test.\\n     *  @return true if the address is known to the contract.\\n     */\\n    function isVerified(address addr)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return verified[addr] != ZERO_BYTES;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x51215884ff6c433d70dc44ee939b71c59977f6b98fc00894ad9ef22e523c0cf1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806347089f62116100ad578063a9059cbb11610071578063a9059cbb1461025a578063ab377daa1461026d578063b9209e3314610280578063dd62ed3e146102ab578063f2fde38b146102e457600080fd5b806347089f62146101e957806370a08231146101fc578063715018a6146102255780638da5cb5b1461022d57806395d89b411461025257600080fd5b806325d998bb116100f457806325d998bb1461018c578063313ce5671461019f578063354b7b1d146101ae57806340c10f19146101c35780634487b392146101d657600080fd5b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016757806323b872dd14610179575b600080fd5b61012e6102f7565b60405161013b9190610a6f565b60405180910390f35b610157610152366004610ada565b610389565b604051901515815260200161013b565b6002545b60405190815260200161013b565b610157610187366004610b04565b6103a3565b61016b61019a366004610b40565b6103f0565b6040516000815260200161013b565b6101c16101bc366004610ada565b610436565b005b6101c16101d1366004610ada565b6104ae565b6101c16101e4366004610b40565b6104e6565b6101c16101f7366004610ada565b61053d565b61016b61020a366004610b40565b6001600160a01b031660009081526020819052604090205490565b6101c16105c9565b6005546001600160a01b03165b6040516001600160a01b03909116815260200161013b565b61012e6105dd565b610157610268366004610ada565b6105ec565b61023a61027b366004610b62565b610637565b61015761028e366004610b40565b6001600160a01b0316600090815260066020526040902054151590565b61016b6102b9366004610b7b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101c16102f2366004610b40565b610661565b60606003805461030690610bae565b80601f016020809104026020016040519081016040528092919081815260200182805461033290610bae565b801561037f5780601f106103545761010080835404028352916020019161037f565b820191906000526020600020905b81548152906001019060200180831161036257829003601f168201915b5050505050905090565b6000336103978185856106a4565b60019150505b92915050565b6001600160a01b03821660009081526006602052604081205483906103c757600080fd5b826103d1866103f0565b10156103dc57600080fd5b6103e78585856106b6565b95945050505050565b6001600160a01b038116600090815260066020526040812054829061041457600080fd5b6001600160a01b03831660009081526020819052604090205491505b50919050565b61043e6106da565b6001600160a01b038216600090815260066020526040902054829061046257600080fd5b8161046c57600080fd5b6001600160a01b0383166000908152600660205260409020548281146104a8576001600160a01b03841660009081526006602052604090208390555b50505050565b6104b66106da565b6001600160a01b0382166000908152600660205260409020546104d857600080fd5b6104e28282610707565b5050565b6104ee6106da565b6001600160a01b03811660009081526006602052604090205461051057600080fd5b610519816103f0565b1561052357600080fd5b6001600160a01b0316600090815260066020526040812055565b6105456106da565b6001600160a01b038083166000908152600760205260409020548391161561056c57600080fd5b6001600160a01b03831661057f57600080fd5b8161058957600080fd5b6001600160a01b038316600090815260066020526040902054156105ac57600080fd5b506001600160a01b03909116600090815260066020526040902055565b6105d16106da565b6105db600061073d565b565b60606004805461030690610bae565b6001600160a01b038216600090815260066020526040812054839061061057600080fd5b8261061a336103f0565b101561062557600080fd5b61062f848461078f565b949350505050565b600b818154811061064757600080fd5b6000918252602090912001546001600160a01b0316905081565b6106696106da565b6001600160a01b03811661069857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6106a18161073d565b50565b6106b1838383600161079d565b505050565b6000336106c4858285610872565b6106cf8585856108ea565b506001949350505050565b6005546001600160a01b031633146105db5760405163118cdaa760e01b815233600482015260240161068f565b6001600160a01b0382166107315760405163ec442f0560e01b81526000600482015260240161068f565b6104e260008383610945565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000336103978185856108ea565b6001600160a01b0384166107c75760405163e602df0560e01b81526000600482015260240161068f565b6001600160a01b0383166107f157604051634a1406b160e11b81526000600482015260240161068f565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156104a857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161086491815260200190565b60405180910390a350505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146104a857818110156108db57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161068f565b6104a88484848403600061079d565b6001600160a01b03831661091457604051634b637e8f60e11b81526000600482015260240161068f565b6001600160a01b03821661093e5760405163ec442f0560e01b81526000600482015260240161068f565b6106b18383835b6001600160a01b0383166109705780600260008282546109659190610be2565b909155506109e29050565b6001600160a01b038316600090815260208190526040902054818110156109c35760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161068f565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166109fe57600280548290039055610a1d565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a6291815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b81811015610a9d57858101830151858201604001528201610a81565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610ad557600080fd5b919050565b60008060408385031215610aed57600080fd5b610af683610abe565b946020939093013593505050565b600080600060608486031215610b1957600080fd5b610b2284610abe565b9250610b3060208501610abe565b9150604084013590509250925092565b600060208284031215610b5257600080fd5b610b5b82610abe565b9392505050565b600060208284031215610b7457600080fd5b5035919050565b60008060408385031215610b8e57600080fd5b610b9783610abe565b9150610ba560208401610abe565b90509250929050565b600181811c90821680610bc257607f821691505b60208210810361043057634e487b7160e01b600052602260045260246000fd5b8082018082111561039d57634e487b7160e01b600052601160045260246000fdfea264697066735822122008f8d53f768d20bb5dc78a65a76ebbe11ca95027aad2766ce2719a36c40f862a64736f6c63430008160033",
  "devdoc": {
    "details": "Ref https://github.com/ethereum/EIPs/blob/master/EIPS/eip-884.md",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "TransferRestrictedStock(address,address,uint256,uint256)": {
        "params": {
          "amount": "the amount of transfer.",
          "owner": "The address of owner.",
          "receiver": "The receiver."
        }
      },
      "UpdateRestrictedStockSendTime(address,uint256)": {
        "params": {
          "addr": "The address will be update restrictedStockSendTime.",
          "newRestrictedSendTime": "the amount of transfer."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addVerified(address,bytes32)": {
        "params": {
          "addr": "The address of the person represented by the supplied hash.",
          "hash": "A cryptographic hash of the address holder's verified information."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "isVerified(address)": {
        "params": {
          "addr": "The address to test."
        },
        "returns": {
          "_0": "true if the address is known to the contract."
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to mint.",
          "_to": "The address that will receive the minted tokens."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeVerified(address)": {
        "params": {
          "addr": "The verified address to be removed."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateVerified(address,bytes32)": {
        "params": {
          "addr": "The verified address of the person represented by the supplied hash.",
          "hash": "A new cryptographic hash of the address holder's updated verified information."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TransferRestrictedStock(address,address,uint256,uint256)": {
        "notice": "This event is emitted when an transferRestrictedStock   is called by the owner (only owner can run this command)"
      },
      "UpdateRestrictedStockSendTime(address,uint256)": {
        "notice": "This event is emitted when an updateRestrictedStockSendTime   is called by the owner (only owner can run this command)"
      }
    },
    "kind": "user",
    "methods": {
      "addVerified(address,bytes32)": {
        "notice": "Add a verified address, along with an associated verification hash to the contract.  Upon successful addition of a verified address, the contract must emit  `VerifiedAddressAdded(addr, hash, msg.sender)`.  It MUST throw if the supplied address or hash are zero, or if the address has already been supplied."
      },
      "availableBalanceOf(address)": {
        "notice": "The `availableBalanceOf` function show current available amount to spend of a verified address (to)"
      },
      "isVerified(address)": {
        "notice": "Tests that the supplied address is known to the contract."
      },
      "mint(address,uint256)": {
        "notice": "As each token is minted it is added to the shareholders array."
      },
      "removeVerified(address)": {
        "notice": "Remove a verified address, and the associated verification hash. If the address is  unknown to the contract then this does nothing. If the address is successfully removed, this  function must emit `VerifiedAddressRemoved(addr, msg.sender)`.  It MUST throw if an attempt is made to remove a verifiedAddress that owns Tokens."
      },
      "transfer(address,uint256)": {
        "notice": "The `transfer` function MUST NOT allow transfers to addresses that  have not been verified and added to the contract.  If the `to` address is not currently a shareholder then it MUST become one.  If the transfer will reduce `msg.sender`'s balance to 0 then that address  MUST be removed from the list of shareholders."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The `transferFrom` function MUST NOT allow transfers to addresses that  have not been verified and added to the contract.  If the `to` address is not currently a shareholder then it MUST become one.  If the transfer will reduce `from`'s balance to 0 then that address  MUST be removed from the list of shareholders."
      },
      "updateVerified(address,bytes32)": {
        "notice": "Update the hash for a verified address known to the contract.  Upon successful update of a verified address the contract must emit  `VerifiedAddressUpdated(addr, oldHash, hash, msg.sender)`.  If the hash is the same as the value already stored then  no `VerifiedAddressUpdated` event is to be emitted.  It MUST throw if the hash is zero, or if the address is unverified."
      }
    },
    "notice": "An `ERC20` compatible token that conforms to Delaware State Senate,  149th General Assembly, Senate Bill No. 69: An act to Amend Title 8  of the Delaware Code Relating to the General Corporation Law.  Implementation Details.  An implementation of this token standard SHOULD provide the following:  `name` - for use by wallets and exchanges.  `symbol` - for use by wallets and exchanges.  In addition to the above the following optional `ERC20` function MUST be defined.  `decimals` — MUST return `0` as each token represents a single Share and Shares are non-divisible.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4157,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4163,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4165,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4167,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4169,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3904,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4672,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "verified",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 4676,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "cancellations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4680,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "holderIndices",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4684,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "restrictedStock",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4688,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "restrictedStockSendTime",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4691,
        "contract": "contracts/mocks/EthDFG.sol:EthDFG",
        "label": "shareholders",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}